/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interface;

import java.awt.BorderLayout;
import java.awt.Image;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rayson
 */
public class MenuPrincipal extends javax.swing.JFrame {
    private DefaultTableModel tableModel;
    /**
     * Creates new form MenuPrincipal
     */
    public MenuPrincipal() {
        initComponents();
        errorNames.setVisible(false);
        errorId.setVisible(false);
        errorPhone.setVisible(false);
        errorEmail.setVisible(false);
        
        ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/BackgroundImages/Fondo3.gif"));
        Icon fondo1=new ImageIcon(imagenFondo.getImage().getScaledInstance(fondo.getWidth(), fondo.getHeight(),Image.SCALE_DEFAULT));
        fondo.setIcon(fondo1);
        this.repaint();
                tableModel = new DefaultTableModel(
            new Object[][] {},
            new String[]{"Nombre y Apellido", "ID", "Telefono","Email"}
        );
        dataTable.setModel(tableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        NombresLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        errorNames = new javax.swing.JLabel();
        telfLabel = new javax.swing.JLabel();
        errorEmail = new javax.swing.JLabel();
        errorPhone = new javax.swing.JLabel();
        errorId = new javax.swing.JLabel();
        names = new javax.swing.JTextField();
        id = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        phone = new javax.swing.JTextField();
        back = new javax.swing.JButton();
        deleteTable = new javax.swing.JButton();
        saveTable = new javax.swing.JButton();
        ModificateTable = new javax.swing.JButton();
        fondo = new javax.swing.JLabel();
        MenuBaseDatos = new javax.swing.JMenuBar();
        MongolBDMenu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        GuardarBD = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenu();
        exitMenuAdd = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(dataTable);

        jScrollPane2.setViewportView(jScrollPane1);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(345, 35, 498, 231));

        NombresLabel.setForeground(new java.awt.Color(255, 255, 255));
        NombresLabel.setText("Nombres Completos");
        jPanel2.add(NombresLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 164, -1));

        idLabel.setForeground(new java.awt.Color(255, 255, 255));
        idLabel.setText("ID");
        jPanel2.add(idLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 37, -1));

        emailLabel.setForeground(new java.awt.Color(255, 255, 255));
        emailLabel.setText("Email");
        jPanel2.add(emailLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 183, -1));

        errorNames.setForeground(new java.awt.Color(255, 0, 51));
        errorNames.setText("Error, tiene que tener un nombre y un apellido");
        jPanel2.add(errorNames, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 250, 30));

        telfLabel.setForeground(new java.awt.Color(255, 255, 255));
        telfLabel.setText("Telefono");
        jPanel2.add(telfLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 183, -1));

        errorEmail.setForeground(new java.awt.Color(255, 0, 51));
        errorEmail.setText("Email incorrecto");
        jPanel2.add(errorEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, 183, -1));

        errorPhone.setForeground(new java.awt.Color(255, 0, 51));
        errorPhone.setText("Telefono incorrecto");
        jPanel2.add(errorPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 183, -1));

        errorId.setForeground(new java.awt.Color(255, 0, 51));
        errorId.setText("Id Incorrecto");
        jPanel2.add(errorId, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 183, -1));

        names.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namesActionPerformed(evt);
            }
        });
        jPanel2.add(names, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 189, -1));

        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });
        jPanel2.add(id, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 183, -1));

        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });
        jPanel2.add(email, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 183, -1));

        phone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneActionPerformed(evt);
            }
        });
        jPanel2.add(phone, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 183, -1));

        back.setText("REGRESAR");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jPanel2.add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 300, -1, -1));

        deleteTable.setText("ELIMINAR");
        deleteTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTableActionPerformed(evt);
            }
        });
        jPanel2.add(deleteTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 300, -1, -1));

        saveTable.setText("GUARDAR");
        saveTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTableActionPerformed(evt);
            }
        });
        jPanel2.add(saveTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 310, -1, -1));

        ModificateTable.setText("MODIFICAR");
        ModificateTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificateTableActionPerformed(evt);
            }
        });
        jPanel2.add(ModificateTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 310, -1, -1));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BackgroundImages/Fondo3.gif"))); // NOI18N
        jPanel2.add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, -30, 900, 420));

        MenuBaseDatos.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        MongolBDMenu.setText("MongolBD");

        jMenu1.setText("Guardar");

        GuardarBD.setText("Guardar En BD");
        GuardarBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarBDActionPerformed(evt);
            }
        });
        jMenu1.add(GuardarBD);

        MongolBDMenu.add(jMenu1);

        jMenu2.setText("Conectar");

        jMenuItem2.setText("Conectar BD");
        jMenu2.add(jMenuItem2);

        MongolBDMenu.add(jMenu2);

        MenuBaseDatos.add(MongolBDMenu);

        exitMenu.setText("Exit");

        exitMenuAdd.setText("Salir");
        exitMenuAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuAddActionPerformed(evt);
            }
        });
        exitMenu.add(exitMenuAdd);

        MenuBaseDatos.add(exitMenu);

        setJMenuBar(MenuBaseDatos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTableActionPerformed
    // Obtener los datos ingresados
    String nombres = names.getText();
    String ID = id.getText();
    String telf = phone.getText();
    String mail = email.getText();

    // Validar los campos
    boolean valid = true;

    if (!nombres.matches("[A-Za-z]+\\s[A-Za-z]+")) {
        errorNames.setText("Error: tiene que tener un nombre y un apellido");
        errorNames.setVisible(true);
        valid = false;
    } else {
        errorNames.setVisible(false);
    }

    if (!ID.matches("\\d{10}")) {
        errorId.setText("Error: el ID debe contener 10 dígitos");
        errorId.setVisible(true);
        valid = false;
    } else {
        errorId.setVisible(false);
    }

    if (!telf.matches("\\d{10}")) {
        errorPhone.setText("Error: el teléfono debe contener 10 dígitos");
        errorPhone.setVisible(true);
        valid = false;
    } else {
        errorPhone.setVisible(false);
    }

    if (!mail.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
        errorEmail.setText("Error: email incorrecto");
        errorEmail.setVisible(true);
        valid = false;
    } else {
        errorEmail.setVisible(false);
    }

    // Si todos los campos son válidos, agregar a la tabla
    if (valid) {
        String[] camposT = {nombres, ID, telf, mail};
        DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
        tableModel.addRow(camposT);
        
        // Limpiar los campos de entrada
        names.setText("");
        id.setText("");
        phone.setText("");
        email.setText("");
    }
    }//GEN-LAST:event_saveTableActionPerformed

    private void namesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namesActionPerformed
       
    }//GEN-LAST:event_namesActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
                // Ocultar la ventana actual
        this.setVisible(false);
        // Crear y mostrar la ventana de login
        new Login().setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    private void deleteTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTableActionPerformed
    DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
    int[] selectedRows = dataTable.getSelectedRows();

    // Eliminar las filas seleccionadas del modelo de la tabla
    for (int i = selectedRows.length - 1; i >= 0; i--) {
        tableModel.removeRow(selectedRows[i]);
    }
    }//GEN-LAST:event_deleteTableActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void phoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void ModificateTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificateTableActionPerformed
            // Obtener el modelo de la tabla
    DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
    
    // Obtener la fila seleccionada
    int selectedRow = dataTable.getSelectedRow();
    
    // Verificar si se ha seleccionado una fila
    if (selectedRow >= 0) {
        // Obtener los valores de la fila seleccionada
        String nombres = (String) tableModel.getValueAt(selectedRow, 0);
        String ID = (String) tableModel.getValueAt(selectedRow, 1);
        String telf = (String) tableModel.getValueAt(selectedRow, 2);
        String mail = (String) tableModel.getValueAt(selectedRow, 3);

        // Establecer los valores en los campos de texto
        names.setText(nombres);
        id.setText(ID);
        phone.setText(telf);
        email.setText(mail);

        // Confirmar la modificación
        int confirm = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios?", "Confirmar Modificación", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
            // Validar los campos
            boolean valid = true;

            if (!nombres.matches("[A-Za-z]+\\s[A-Za-z]+")) {
                errorNames.setText("Error: tiene que tener un nombre y un apellido");
                errorNames.setVisible(true);
                valid = false;
            } else {
                errorNames.setVisible(false);
            }

            if (!ID.matches("\\d{10}")) {
                errorId.setText("Error: el ID debe contener 10 dígitos");
                errorId.setVisible(true);
                valid = false;
            } else {
                errorId.setVisible(false);
            }

            if (!telf.matches("\\d{10}")) {
                errorPhone.setText("Error: el teléfono debe contener 10 dígitos");
                errorPhone.setVisible(true);
                valid = false;
            } else {
                errorPhone.setVisible(false);
            }

            if (!mail.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
                errorEmail.setText("Error: email incorrecto");
                errorEmail.setVisible(true);
                valid = false;
            } else {
                errorEmail.setVisible(false);
            }

            // Si todos los campos son válidos, actualizar la fila
            if (valid) {
                tableModel.setValueAt(nombres, selectedRow, 0);
                tableModel.setValueAt(ID, selectedRow, 1);
                tableModel.setValueAt(telf, selectedRow, 2);
                tableModel.setValueAt(mail, selectedRow, 3);
                
                // Limpiar los campos de entrada
                names.setText("");
                id.setText("");
                phone.setText("");
                email.setText("");

                JOptionPane.showMessageDialog(this, "Modificación exitosa.", "Modificar", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione una fila para modificar.", "Modificar", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_ModificateTableActionPerformed

    private void GuardarBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarBDActionPerformed
            // Obtener el modelo de la tabla
    DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
    
    // Crear instancia de MongoDBManager (asegúrate de importar la clase correcta)
    ConexionBD.ConexionBD manager = new ConexionBD.ConexionBD();
    
    // Iterar sobre cada fila de la tabla
    for (int i = 0; i < tableModel.getRowCount(); i++) {
        // Obtener los datos de la fila actual
        String nombres = (String) tableModel.getValueAt(i, 0);
        String ID = (String) tableModel.getValueAt(i, 1);
        String telf = (String) tableModel.getValueAt(i, 2);
        String mail = (String) tableModel.getValueAt(i, 3);
        
        // Guardar los datos en MongoDB
        String[] datos = {nombres, ID, telf, mail};
        manager.guardarDatos(datos);
    }
    
    // Cerrar la conexión con MongoDB al finalizar
    manager.cerrarConexion();
    
    // Opcional: Mostrar un mensaje de confirmación
    JOptionPane.showMessageDialog(this, "Datos guardados en MongoDB correctamente.", "Guardar en MongoDB", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_GuardarBDActionPerformed

    private void exitMenuAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuAddActionPerformed
        showExitDialog();
    }//GEN-LAST:event_exitMenuAddActionPerformed
    private void showExitDialog() {
    // Cargar el GIF animado desde recursos
    ImageIcon originalIcon = new ImageIcon(getClass().getResource("/Exitsaludo/salida.gif"));

    // Redimensionar la imagen al tamaño deseado
    Image resizedImage = originalIcon.getImage().getScaledInstance(250, 250, Image.SCALE_DEFAULT);
    ImageIcon resizedIcon = new ImageIcon(resizedImage);

    // Crear un JLabel con el GIF redimensionado y el mensaje
    JLabel label = new JLabel("¡Gracias por usar la aplicación!", resizedIcon, SwingConstants.CENTER);

    // Crear un JDialog personalizado
    JDialog dialog = new JDialog(this, "¡Hasta luego!", true); // true para que sea modal
    dialog.setLayout(new BorderLayout());
    dialog.getContentPane().add(label, BorderLayout.CENTER);
    dialog.setSize(250, 250);
    dialog.setLocationRelativeTo(null); // Centrar en la pantalla
    dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

    // Mostrar el diálogo
    dialog.setVisible(true);

    System.exit(0);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem GuardarBD;
    private javax.swing.JMenuBar MenuBaseDatos;
    private javax.swing.JButton ModificateTable;
    private javax.swing.JMenu MongolBDMenu;
    private javax.swing.JLabel NombresLabel;
    private javax.swing.JButton back;
    private javax.swing.JTable dataTable;
    private javax.swing.JButton deleteTable;
    private javax.swing.JTextField email;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel errorEmail;
    private javax.swing.JLabel errorId;
    private javax.swing.JLabel errorNames;
    private javax.swing.JLabel errorPhone;
    private javax.swing.JMenu exitMenu;
    private javax.swing.JMenuItem exitMenuAdd;
    private javax.swing.JLabel fondo;
    private javax.swing.JTextField id;
    private javax.swing.JLabel idLabel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField names;
    private javax.swing.JTextField phone;
    private javax.swing.JButton saveTable;
    private javax.swing.JLabel telfLabel;
    // End of variables declaration//GEN-END:variables
}
